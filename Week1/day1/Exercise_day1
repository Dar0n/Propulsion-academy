##### Exercise 1

#Function to check if given entry is a string - "Type coercion" realization

def is_string1(text):
    return text == str(text)

# print("is_string1 results:")
# print(is_string1('hello'))  # True
# print(is_string1(['hello']))  # False
# print(is_string1('this is a long sentence'))  # True
# print(is_string1({'a': 2}))  # False
# print(" ")

#Function to check if given entry is a string - "Built-in feature" realization

def is_string2(text):
    return isinstance(text,str)

# print("is_strin2 results:")
# print(is_string2('hello'))  # True
# print(is_string2(['hello']))  # False
# print(is_string2('this is a long sentence'))  # True
# print(is_string2({'a': 2}))  # False
# print(" ")


##### Exercise 2
##### Function to check if a given string contains space and digits

def is_only_string(text):
    if is_string2(text):#Using previous function to check if the entry is a string
        number_counter = 0#initialize counters for spaces and digits
        space_counter = 0
        for char in text:#looping through all the characters in the string to check if we meet space or digit
            if char == " ":
                space_counter = 1 #found a space
            elif char.isdigit():
                number_counter = 1 #found a digit
        if number_counter and space_counter:
            return True
        return False
    else:
        return False

# print("")
# print(is_only_string("2text "))
# print(is_only_string('11'))  # False
# print(is_only_string(['hello']))  # ? Please handle this case!! Should return False
# print(is_only_string('this is a long sentence'))  # False
# print(is_only_string({'a': 2}))  # # ? Please handle this case!! Should return False


#####Exercise 3

#Function to check if the string is alphanumeric, i.e. contains only digits or letters

def is_alphanumeric(text):
    if is_string2(text): #if text is a string..
        if len(text)==0: #return False if string length is 0
            return False
        else:
            # print(text)
            for char in text:
                # print(char)
                if not char.isdigit() and not char.isalpha(): #return False if we find anything but digit or letter
                    return False
            return True
    else:
        return False

print("Exercise 3")
print(is_alphanumeric('1dsf1'))  # True
print(is_alphanumeric(['hello']))  # False
print(is_alphanumeric('this is a long sentence'))  # False
print(is_alphanumeric({'a': 2}))  # False
print(is_alphanumeric("this is string....!!!"))  # False


##### Exercise 4

#Function to check if a parameter is a list or a tuple

def is_array_or_tuple(entry):
    return isinstance(entry, (list,tuple))

print("Exercise 4")
print(is_array_or_tuple('hello'))  # False
print(is_array_or_tuple(['hello']))  # True
print(is_array_or_tuple([2, {}, 10]))  # True
print(is_array_or_tuple({'a': 2}))  # False
print(is_array_or_tuple((1, 2)))  #
print(is_array_or_tuple(set()))


##### Exercise 5

#Function to check if all elementrs of a list are of the same type

def are_same_type(lst):
    list_type = type(lst[0])
    for el in lst:
        if type(el) != list_type:
            return False
    return True

print("Exercise 5")
print(are_same_type(['hello', 'world', 'long sentence']))  # True
print(are_same_type([1, 2, 9, 10]))  # True
print(are_same_type([['hello'], 'hello', ['bye']]))  # False
print(are_same_type([['hello'], [1, 2, 3], [{'a': 2}]]))  # True
print(are_same_type([['hello'], set('hello')]))  # False


##### Exercise 6

#Function to sort and remove duplicates from two strings

def longest_string(a,b):
    result = ""
    merged = a + b
    for char in merged:
        if char not in result:
            result += char
    return "".join(sorted(result))

a = 'xyaabbbccccdefww'
b = 'xxxxyyyyabklmopq'
x = 'abcdefghijklmnopqrstuvwxyz'

print(" ")
print("Exercise 6")
print(longest_string(a, b))
print(longest_string(a, x))

##### Exercise 7

#Function to convert random number into reversed list of digits

def convert(num):
    result = sorted([int(d) for d in str(num)])
    result.reverse()
    return result

print(convert(42924563))  # [9, 6, 5, 4, 3, 2]
print(convert(324))  # [4, 3, 2]


##### Exercuse 8

# Function to count repetitions in a list

def count_repetition(lst):
    result = {}
    for el in lst:
        if el not in result.keys():
            result[el] = 1
        else:
            result[el] += 1
    return result

print("")
print("Exercise 8")
print(count_repetition(['kerouac', 'fante', 'fante', 'buk', 'hemingway', 'hornby', 'kerouac', 'buk', 'fante']))

##### Exercise 9

# Function for a Cat to catch a mouse

def is_caught(entry):
    entry_list = [i for i in entry]
    return (entry_list.index("m") - entry_list.index("C")) <= 3

print("")
print("Exercise 9")
print(is_caught('C.....m'))  # False
print(is_caught('C..m'))  # True
print(is_caught('..C..m'))  # True
print(is_caught('...C...m'))  # False
print(is_caught('C.m'))  # True


##### Exercise 10

#Function to spend money equaly

def split_the_bill(people):
    total = 0
    for spent_money in people.values():
        total += spent_money
    average = total / len(people.values())
    fare_people = {}
    for person in people:
        fare_people[person] = average - people[person]
    return fare_people

group = {
    'Amy': 20,
    'Bill': 15,
    'Chris': 10
}
print("")
print("Exercise 10")
print(split_the_bill(group))  # { 'Amy': -5, 'Bill': 0, 'Chris': 5 }



##### Exercise 11

# Function to raise given base to the given exponent - using the while loop

def exp_loop(base, exp):
    result = 1
    while(exp>0):
        result *= base
        exp -= 1
    return result


print("")
print("Exercise 11")
print(exp_loop(2,4))

# Function to raise given base to the given exponent - using the recursion

def exp_recursive(base,exp):
    if exp == 0:
        return 1
    else:
        return base*exp_recursive(base,exp-1)

print("Recursion")
print(exp_recursive(5, 3))  # 125
print(exp_recursive(2, 4))  # 16
print(exp_recursive(5, 1))  # 5
print(exp_recursive(6, 0))  # 1

##### Exercise 12

# Function to find pairs of indeces of numbers that sum to zero

def zero_sum(lst):
    result = []
    for i in range(len(lst)):
        for j in range(i, len(lst)):
            if (lst[i] + lst[j] == 0) and ([i,j] not in result):
                result.append([i,j])
            elif lst[i]==0 and [i,i] not in result:
                result.append([i,i])
    return result

print("")
print("Exercise 12")
print(zero_sum([1, 5, 0, -5, 3, -1]))  # [[0, 5], [1, 3], [2, 2]]
print(zero_sum([1, -1]))  # [[0, 1]]
print(zero_sum([0, 4, 3, 5, 0]))  # [[0, 0]]


##### Exercise 13

# Function to count UPPERCASE and lowercase letter in a sentence

def count_cases():
    input_line = input("Enter a line to count letters in:")
    lowercase_counter = 0
    uppercase_counter = 0
    for char in input_line:
        if char.isupper():
            uppercase_counter += 1
        elif char.islower():
            lowercase_counter += 1
    return "UPPER CASE {} LOWER CASE {}".format(uppercase_counter, lowercase_counter)

print("")
print("Exercise 13")
#print(count_cases())


##### Exercise 14

# Function that converts list into nested dictionary of keys

def new_dict(lst):
    result = {}
    for i in range(len(lst)-1, -1, -1):
        result = {lst[i]: result}
    return result

print("")
print("Exercise 14")
print(new_dict([1,2,3,4,5]))


##### Exercise 15

# Function to calculate bank account net amount based on the transactions history

def account_net():
    remainder = 0
    change = 0
    while True:
        input_line = input("Would you like to deposit or to withdraw?")
        if input_line == "":
            break
        change = int(input_line[2:])
        if input_line[0] == "D":
            print("Depositing " + str(change))
            remainder += change
            print("Your balance is " + str(remainder))
        elif input_line[0] == "W":
            if change > remainder:
                print("The balance is not enough")
            else:
                print("Withdrawing " + str(change))
                remainder -= change
                print("Your balance is " + str(remainder))
    return remainder

print("")
print("Exercise 15")
# print(account_net())


##### Exercise 16

# Function to generate dictionary of key-value pairs where keys are numbers 1-20 and values are their squares

def print_dictionary():
    result = {}
    for i in range(20):
        result[i+1] = (i+1)**2
        print(result[i+1])

print("")
print("Exercise 16")
print_dictionary()


##### Exercise 17

# Function to make all possible permutations from a given collection of numbers

# permutations = []
#
#
# def permute(lst):
#     result = []
#     for i in
#
# print(permute([1,2,3]))




##### Exercise 18

# Functoin to change numbers to words
def write_number(num):
    result = ""
    singles = ["", "one", "two", "three", "four", "five", "six", "seven", "eight", "nine"]
    doubles_below_twenty = ["ten", "eleven", "twelve", "thirteen", "fourteen", "fifteen", "sixteen", "sevemteem", "eighteen", "nineteen"]
    doubles_from_twenty = ["twenty", "thirty", "fourty", "fifty", "sixty", "seventy", "eighty", "ninety"]
    if num < 10:
        result = singles[num]
    elif num < 20:
        result = doubles_below_twenty[num-10]
    elif num < 100:
        result = doubles_from_twenty[num//10-2] + " " + singles[num%10]
    else: #suppose we have number below 1000
        result = singles[num//100] + " hundred " + doubles_from_twenty[num%100//10-2] + " " + singles[num%10]
    return result

print("")
print("Exercise 18")
print(write_number(235))
